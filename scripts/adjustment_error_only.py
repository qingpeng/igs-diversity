#! /usr/bin/env python
"""
adjust the reads count according to sequencing error rate.


% scripts/seperate_IGS.py <spectrum file> <MAP file>

Use '-h' for parameter help.

There are two output files - *.IGS_abund and *.IGS



.spectrum file example:(generated by count_spectrum_freq_multiple_files.py)

0-0-0-1 0 0 0 87943
0-0-0-2 0 0 0 24609
0-0-0-3 0 0 0 1578
0-0-0-4 0 0 0 75
0-0-0-5 0 0 0 4
1-0-0-0 27040 0 0 0
1-0-0-1 10326 0 0 58349
1-0-0-2 765 0 0 33028
1-0-0-3 38 0 0 3167
1-0-0-4 4 0 0 217
1-0-0-5 0 0 0 14
1-0-0-6 0 0 0 3
1-0-1-0 13115 0 13115 0
1-0-1-1 5367 0 5367 22585



"""

import argparse
from scipy.stats import binom

parser = argparse.ArgumentParser()
parser.add_argument('input')
parser.add_argument('error_rate')
parser.add_argument('output')
args = parser.parse_args()

p = float(args.error_rate)
file_in = args.input
file_out = args.output

file_in_o = open(file_in,'r')
file_out_o = open(file_out,'w')

n_sample = (len(file_in_o.readline().split())-1)
reads_number_in_sample = [0]* n_sample

print n_sample

file_in_o.close()
file_in_o = open(file_in,'r')


spectrum_count={}
for line in file_in_o:
    line = line.rstrip()
    f1 = line.split()
    f2 = f1[0].split('-')
    
    list_reads_number = f1[1:]
    # get number of reads with abundance in one sample
    for i in range(n_sample):
      if int(list_reads_number[i]) > 0:
        reads_number_in_sample[i] += int(list_reads_number[i])
    spectrum_count[f1[0]] = list_reads_number

sorted_str = sorted(spectrum_count.keys())

# calculate reads with coverage as one that is from errror
n = 100

fake_single_rate = 1-(binom.pmf(0, n, p)+binom.pmf(1, n, p)+binom.pmf(2, n, p)+binom.pmf(3, n, p)*(1-0.478)+
binom.pmf(4, n, p)*(1-0.759)+binom.pmf(5, n, p)*(1-0.898))


print fake_single_rate
print reads_number_in_sample

for i in range(n_sample):
    empty_spec = ['0']*n_sample
    empty_spec[i] = '1'
    spectrum = '-'.join(empty_spec)
    if spectrum in spectrum_count:
        adjusted = int(spectrum_count[spectrum][i]) - int(reads_number_in_sample[i]*fake_single_rate)
        if adjusted <0:
            spectrum_count[spectrum][i] = '0'
        else:
            spectrum_count[spectrum][i] = str(adjusted)

for spectrum in sorted_str:
    new_spectr = ' '.join(spectrum_count[spectrum])
    line = spectrum + ' ' +new_spectr
    file_out_o.write(line+'\n')


        