#! /usr/bin/env python

# adjustment according to error and collision (0.1 fpr)

"""
Get the list of IGSs for different samples seperately for alpha diversity analysis.

% scripts/seperate_IGS_for_alpha.py <spectrum file> <MAP file>

Use '-h' for parameter help.

There are two output files - *.IGS_abund.alpha and *.IGS.alpha

Treat each IGSs in samples seperately.

Specifically for alpha diversity analysis.

Firstly get the total number N of reads in a sample with a specific coverage C.
The number of IGSs in that sample with that coverage is N/C.
Treat all the IGSs in a sample are unique in that sample.

Then list all the IGSs in that samples in a matrix.
With only abundance in the column of that sample ,0 for all other samples.

This is more straightford and more accurate than the methods used for beta
diversity analysis. 


The sample IDs in MAP file will be used as the header in .IGS file.



.spectrum file example:(generated by count_spectrum_freq_multiple_files.py)

0-0-0-1 0 0 0 87943
0-0-0-2 0 0 0 24609
0-0-0-3 0 0 0 1578
0-0-0-4 0 0 0 75
0-0-0-5 0 0 0 4
1-0-0-0 27040 0 0 0
1-0-0-1 10326 0 0 58349
1-0-0-2 765 0 0 33028
1-0-0-3 38 0 0 3167
1-0-0-4 4 0 0 217
1-0-0-5 0 0 0 14
1-0-0-6 0 0 0 3
1-0-1-0 13115 0 13115 0
1-0-1-1 5367 0 5367 22585


.IGS file example:

1       0       0       0       1
2       0       0       0       1
3       0       0       0       1
4       0       0       0       1
5       0       0       0       1
6       0       0       0       1
7       0       0       0       1
8       0       0       0       1
9       0       0       0       1
10      0       0       0       1
11      0       0       0       1


.IGS_abund example:

0-0-0-1 87943.0
0-0-0-2 12304.5
0-0-0-3 526.0
0-0-0-4 18.75
0-0-0-5 0.8
1-0-0-0 27040.0
1-0-0-1 34337.5 # 1-0-0-0
1-0-0-2 11264.3333333
1-0-0-3 801.25
1-0-0-4 44.2
1-0-0-5 2.33333333333
1-0-0-6 0.428571428571
1-0-1-0 13115.0
1-0-1-1 11106.3333333
1-0-1-2 3656.5
1-0-1-3 289.8

"""

import argparse
from scipy.stats import binom

parser = argparse.ArgumentParser()
parser.add_argument('spectrum')
parser.add_argument('map_file')
parser.add_argument('error_rate')
args = parser.parse_args()

p = float(args.error_rate)
file_in = args.spectrum
file_map = args.map_file

file_out1 = file_in + '.IGS_abund.alpha'
file_out2 = file_in + '.IGS.alpha'


file_in_o = open(file_in,'r')
file_map_o = open(file_map,'r')

file_out1_o = open(file_out1,'w')
file_out2_o = open(file_out2,'w')

file_map_o.readline()
ID_list = []

for line in file_map_o:
  line = line.rstrip()
  ID_list.append(line.split()[0])

to_print_IGS = '#OTU_ID'+'\t'+'\t'.join(ID_list)+'\n'
file_out2_o.write(to_print_IGS) # write header

n_sample = len(ID_list)




spectrum_count={}

reads_number_in_sample = [0]*n_sample

for line in file_in_o:
    line = line.rstrip()
    f1 = line.split()
    f2 = f1[0].split('-')
    
    list_reads_number = f1[1:]
    # get number of reads with abundance in one sample
    for i in range(n_sample):
      empty_spec = ['0']*n_sample
      if int(list_reads_number[i]) > 0:
        reads_number_in_sample[i] += int(list_reads_number[i])
        empty_spec[i] = f2[i] # it's possible this is still 0
        spectrum = '-'.join(empty_spec)
        if spectrum in spectrum_count:
          spectrum_count[spectrum] += int(list_reads_number[i])
        else:
          spectrum_count[spectrum] = int(list_reads_number[i])

sorted_str = sorted(spectrum_count.keys())

# calculate reads with coverage as one that is from errror
n = 100


fake_single_rate = 1-(binom.pmf(0, n, p)+binom.pmf(1, n, p)+binom.pmf(2, n, p)+binom.pmf(3, n, p)*(1-0.2352)+
binom.pmf(4, n, p)*(1-0.5804)+binom.pmf(5, n, p)*(1-0.7998))

fake_double_rate = binom.pmf(3, n, p)*0.2048 + binom.pmf(4, n, p)*0.1794 +binom.pmf(5, n, p)*0.1014

print fake_single_rate
print fake_double_rate
print reads_number_in_sample

for i in range(n_sample):

# for singliton
    empty_spec = ['0']*n_sample
    empty_spec[i] = '1'
    spectrum = '-'.join(empty_spec)
    if spectrum in spectrum_count:
        adjusted = spectrum_count[spectrum] - int(reads_number_in_sample[i]*fake_single_rate)
        if adjusted <0:
            spectrum_count[spectrum] = 0
        else:
            spectrum_count[spectrum] = adjusted

# for doublington
    empty_spec = ['0']*n_sample
    empty_spec[i] = '2'
    spectrum = '-'.join(empty_spec)
    if spectrum in spectrum_count:
        adjusted = spectrum_count[spectrum] - int(reads_number_in_sample[i]*fake_double_rate)
        if adjusted <0:
            spectrum_count[spectrum] = 0
        else:
            spectrum_count[spectrum] = adjusted
            
            

IGS_count = 0
for spectrum in sorted_str:
  sum_spectr = 0
  for freq in spectrum.split('-'):
        sum_spectr = sum_spectr + int(freq)
  if sum_spectr == 0:
    continue
    
  IGS_abundance = spectrum_count[spectrum]/float(sum_spectr) 
        
  file_out1_o.write(spectrum+' '+str(spectrum_count[spectrum])+' '+ str(IGS_abundance) + '\n')

    
  if int(IGS_abundance)>=1:
        for i in range(int(IGS_abundance)):
            IGS_count += 1
            new_spectr = spectrum.replace('-','\t')
            file_out2_o.write(str(IGS_count)+'\t'+new_spectr+'\n')
            


        